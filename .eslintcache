[{"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/serviceWorker.js":"1","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Quora.tsx":"2","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Sidebar.tsx":"3","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/QHeader.tsx":"4","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/SidebarOptions.tsx":"5","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/auth/Login.tsx":"6","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Feed.tsx":"7","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Widget.tsx":"8","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/QuorBox.tsx":"9","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/WidgetContent.tsx":"10","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Post.tsx":"11","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/index.tsx":"12","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/app/store.ts":"13","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/App.tsx":"14","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/firebase.ts":"15","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/userSlice.ts":"16","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/index.ts":"17","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/questionSlice.ts":"18"},{"size":5004,"mtime":1620143427000,"results":"19","hashOfConfig":"20"},{"size":453,"mtime":1649363284127,"results":"21","hashOfConfig":"20"},{"size":229,"mtime":1620143427000,"results":"22","hashOfConfig":"20"},{"size":6483,"mtime":1649364909711,"results":"23","hashOfConfig":"20"},{"size":2548,"mtime":1620143427000,"results":"24","hashOfConfig":"20"},{"size":4536,"mtime":1649363314913,"results":"25","hashOfConfig":"20"},{"size":874,"mtime":1649363623487,"results":"26","hashOfConfig":"20"},{"size":364,"mtime":1620143427000,"results":"27","hashOfConfig":"20"},{"size":1034,"mtime":1649364207737,"results":"28","hashOfConfig":"20"},{"size":2353,"mtime":1620143427000,"results":"29","hashOfConfig":"20"},{"size":6815,"mtime":1649363961587,"results":"30","hashOfConfig":"20"},{"size":657,"mtime":1649360638882,"results":"31","hashOfConfig":"20"},{"size":150,"mtime":1649364106491,"results":"32","hashOfConfig":"20"},{"size":1059,"mtime":1649364245343,"results":"33","hashOfConfig":"20"},{"size":724,"mtime":1649280449522,"results":"34","hashOfConfig":"20"},{"size":647,"mtime":1649364884756,"results":"35","hashOfConfig":"20"},{"size":408,"mtime":1649364088350,"results":"36","hashOfConfig":"20"},{"size":686,"mtime":1649364122518,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"14w63w",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/serviceWorker.js",[],["78","79"],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Quora.tsx",[],["80","81"],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Sidebar.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/QHeader.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/SidebarOptions.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/auth/Login.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Feed.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Widget.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/QuorBox.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/WidgetContent.tsx",[],["82","83"],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/components/Post.tsx",["84"],"import {Avatar} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./Post.css\";\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\nimport {MoreHorizOutlined, ShareOutlined} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectUser} from \"../reducer/userSlice\";\nimport Modal from \"react-modal\";\nimport db from \"../firebase\";\nimport {selectQuestionId, setQuestionInfo} from \"../reducer/questionSlice\";\nimport firebase from \"firebase\";\n\ninterface Props {\n    data: any;\n}\n\nconst Post: React.FC<Props> = function ({data}) {\n    const {Id, question, imageUrl, timestamp, users} = data;\n    const user = useSelector(selectUser);\n    const dispatch = useDispatch();\n\n    const [IsmodalOpen, setIsModalOpen] = useState(false);\n    const questionId = useSelector(selectQuestionId);\n    const [answer, setAnswer] = useState(\"\");\n    const [getAnswers, setGetAnswers] = useState<any[]>();\n\n    useEffect(() => {\n        if (questionId) {\n            db.collection(\"questions\")\n                .doc(questionId)\n                .collection(\"answer\")\n                .orderBy(\"timestamp\", \"desc\")\n                .onSnapshot((snapshot) =>\n                    setGetAnswers(snapshot.docs.map((doc) => ({id: doc.id, answers: doc.data()})))\n                );\n        }\n    }, [questionId]);\n\n    const handleAnswer = (e: any) => {\n        e.preventDefault();\n\n        if (questionId) {\n            db.collection(\"questions\").doc(questionId).collection(\"answer\").add({\n                user: user,\n                answer: answer,\n                questionId: questionId,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            });\n        }\n        console.log(questionId);\n        setAnswer(\"\");\n        setIsModalOpen(false);\n    };\n    return (\n        <div\n            className=\"post\"\n            onClick={() =>\n                dispatch(\n                    setQuestionInfo({\n                        questionId: Id,\n                        questionName: question,\n                    })\n                )\n            }\n        >\n            <div className=\"post__info\">\n                <Avatar />\n                <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n            </div>\n            <div className=\"post__body\">\n                <div className=\"post__question\">\n                    <p>{question}</p>\n                    <button onClick={() => setIsModalOpen(true)} className=\"post__btnAnswer\">\n                        Answer\n                    </button>\n                    <Modal\n                        isOpen={IsmodalOpen}\n                        onRequestClose={() => setIsModalOpen(false)}\n                        shouldCloseOnOverlayClick={false}\n                        style={{\n                            overlay: {\n                                width: 680,\n                                height: 550,\n                                backgroundColor: \"rgba(0,0,0,0.8)\",\n                                zIndex: 1000,\n                                top: \"50%\",\n                                left: \"50%\",\n                                marginTop: \"-250px\",\n                                marginLeft: \"-350px\",\n                            },\n                        }}\n                    >\n                        <div className=\"modal__question\">\n                            <h1>{question}</h1>\n                            <p>\n                                asked by <span className=\"name\"></span> {\"\"}\n                                on <span className=\"name\">{new Date(timestamp?.toDate()).toLocaleString()}</span>\n                            </p>\n                        </div>\n                        <div className=\"modal__answer\">\n                            <textarea\n                                value={answer}\n                                onChange={(e) => setAnswer(e.target.value)}\n                                placeholder=\"Enter Your Answer\"\n                            />\n                        </div>\n                        <div className=\"modal__button\">\n                            <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\n                                Cancel\n                            </button>\n                            <button type=\"submit\" onClick={handleAnswer} className=\"add\">\n                                Add Answer\n                            </button>\n                        </div>\n                    </Modal>\n                </div>\n                <div className=\"post__answer\">\n                    {getAnswers?.map(({id, answers}) => (\n                        <p key={id} style={{position: \"relative\", paddingBottom: \"5px\"}}>\n                            {Id === answers.questionId ? (\n                                <span>\n                                    {answers.answer}\n                                    <br />\n                                    <span\n                                        style={{\n                                            position: \"absolute\",\n                                            color: \"gray\",\n                                            fontSize: \"small\",\n                                            display: \"flex\",\n                                            right: \"0px\",\n                                        }}\n                                    >\n                                        <span style={{color: \"#b92b27\"}}>\n                                            Anonymous\n                                            {new Date(answers.timestamp?.toDate()).toLocaleString()}\n                                        </span>\n                                    </span>\n                                </span>\n                            ) : (\n                                \"\"\n                            )}\n                        </p>\n                    ))}\n                </div>\n                <img src={imageUrl} alt=\"\" />\n            </div>\n            <div className=\"post__footer\">\n                <div className=\"post__footerAction\">\n                    <ArrowUpwardOutlinedIcon />\n                    <ArrowDownwardOutlinedIcon />\n                </div>\n\n                <RepeatOutlinedIcon />\n                <ChatBubbleOutlineOutlinedIcon />\n                <div className=\"post__footerLeft\">\n                    <ShareOutlined />\n                    <MoreHorizOutlined />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(Post);\n","/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/index.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/app/store.ts",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/App.tsx",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/firebase.ts",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/userSlice.ts",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/index.ts",[],"/mnt/Codefiles/REACT MASTER/QuoraForCollege-master/src/reducer/questionSlice.ts",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"87","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":21,"column":47,"nodeType":"93","messageId":"94","endLine":21,"endColumn":52},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],"@typescript-eslint/no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]